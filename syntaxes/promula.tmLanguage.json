{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "PROMULA",
  "fileTypes": ["prm"],
  "patterns": [
    {
      "include": "#comment"
    },
    {
      "match": "(?i)\\b(true|false|inf|neginf|nan|nil|na)\\b",
      "name": "constant.language.promula"
    },
    {
      "include": "#define-variable"
    },
    {
      "include": "#define-segment"
    },
    {
      "include": "#numeric-constant"
    },
    {
      "include": "#define-procedure"
    },
    {
      "include": "#define"
    },
    {
      "include": "#open"
    },
    {
      "include": "#read-segment"
    },
    {
      "include": "#function"
    },
    {
      "include": "#keyword"
    },
    {
      "include": "#operator"
    },
    {
      "include": "#string"
    },
    {
      "include": "#function-call"
    }
  ],
  "repository": {
    "comment": {
      "patterns": [
        {
          "begin": "^\\s*\\*+",
          "end": "\n",
          "name": "comment.line.promula"
        }
      ]
    },
    "numeric-constant": {
      "name": "constant.numeric.promula",
      "match": "(?ix)[\\+\\-]?(\\b\\d+\\.?\\d*|\\.\\d+) (_\\w+|d[\\+\\-]?\\d+|e[\\+\\-]?\\d+(_\\w+)?)?(?![a-z_])"
    },
    "string": {
      "patterns": [
        {
          "name": "string.quoted.double.promula",
          "begin": "\"",
          "end": "\""
        },
        {
          "name": "string.quoted.single.promula",
          "begin": "'",
          "end": "'"
        }
      ]
    },
    "open": {
      "patterns": [
        {
          "match": "(?i)\\b(open)\\s+(segment)\\b(.*)\\b(status)\\s*(=)\\s*(\\w+)\\b",
          "captures": {
            "1": {
              "name": "support.function.builtin.promula"
            },
            "2": {
              "name": "storage.type.segment.promula"
            },
            "3": {
              "name": "string.quoted.double"
            },
            "4": {
              "name": "storage.type.status.promula"
            },
            "5": {
              "name": "keyword.operator.promula"
            },
            "6": {
              "name": "entity.name.function.promula"
            }
          },
          "patterns": [
            {
              "include": "#string"
            }
          ]
        },
        {
          "match": "(?i)\\b(open)\\s+(segment)\\b\\s*(.*)$",
          "captures": {
            "1": {
              "name": "support.function.builtin.promula"
            },
            "2": {
              "name": "storage.type.segment.promula"
            },
            "3": {
              "name": "string.quoted.double"
            }
          },
          "patterns": [
            {
              "include": "#string"
            }
          ]
        },
        {
          "match": "(?i)\\b(open)\\s+(\\w+)\\b(.*)?,?\\s+(status)\\s*(=)\\s*(\\w+)$",
          "captures": {
            "1": {
              "name": "support.function.builtin.promula"
            },
            "2": {
              "name": "entity.name"
            },
            "3": {
              "name": "string.quoted.double"
            },
            "4": {
              "name": "storage.type.status.promula"
            },
            "5": {
              "name": "keyword.operator.promula"
            },
            "6": {
              "name": "entity.name.function.promula"
            }
          }
        }
      ]
    },
    "read-segment": {
      "patterns": [
        {
          "match": "(?i)\\b(read)\\s+(segment)\\s+([\\w\\d]+)(?:\\s*[,]\\s*(do)\\((\\w+)\\))?$",
          "captures": {
            "1": {
              "name": "support.function.builtin.promula"
            },
            "2": {
              "name": "storage.type.segment.promula"
            },
            "3": {
              "name": "entity.name.function.promula"
            },
            "4": {
              "name": "keyword.control.promula"
            },
            "5": {
              "name": "entity.name.function.promula"
            }
          },
          "patterns": [
            {
              "include": "#string"
            }
          ]
        }
      ]
    },
    "define": {
      "patterns": [
        {
          "match": "(?i)\\b(define)\\s+(PROGRAM|MENU|TABLE|PARAMETER|FILE|RELATION|SET|WINDOW)\\b",
          "captures": {
            "1": {
              "name": "keyword.control.define.promula"
            },
            "2": {
              "name": "storage.type.generic.promula"
            }
          }
        },
        {
          "match": "(?i)\\b(end(?:\\s+define)?)\\s+(PROGRAM|MENU|TABLE|PARAMETER|FILE|RELATION|SET|WINDOW)\\b",
          "captures": {
            "1": {
              "name": "keyword.control.end.define.promula"
            },
            "2": {
              "name": "storage.type.generic.promula"
            }
          }
        }
      ]
    },
    "define-procedure": {
      "patterns": [
        {
          "name": "meta.block.define.procedure.promula",
          "begin": "(?i)\\b(define)\\s+(procedure)\\b\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\b",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.define.procedure.promula"
            },
            "2": {
              "name": "storage.type.define.procedure.promula"
            },
            "3": {
              "name": "entity.name.function.promula"
            }
          },
          "end": "(?i)\\b(end(?:\\s+define\\b)?)\\b(\\s+procedure)\\s+(\\3)?\\b",
          "endCaptures": {
            "1": {
              "name": "keyword.control.end.procedure.promula"
            },
            "2": {
              "name": "storage.type.define.procedure.promula"
            },
            "3": {
              "name": "entity.name.function.promula"
            }
          },
          "patterns": [
            {
              "include": "$base"
            }
          ]
        },
        {
          "name": "meta.block.define.procedure.promula",
          "begin": "(?i)\\b(define)\\s+(procedure)\\b\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\b",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.define.procedure.promula"
            },
            "2": {
              "name": "storage.type.define.procedure.promula"
            },
            "3": {
              "name": "entity.name.function.promula"
            }
          },
          "end": "(?i)\\b(end(?:\\s+define\\b)?)\\b\\s+(\\3)?\\b",
          "endCaptures": {
            "1": {
              "name": "keyword.control.end.procedure.promula"
            },
            "3": {
              "name": "entity.name.function.promula"
            }
          },
          "patterns": [
            {
              "include": "$base"
            }
          ]
        }
      ]
    },
    "define-variable": {
      "name": "meta.block.define.variable.promula",
      "begin": "(?i)\\b(define)\\s+(variable(?:\\s+scratch)?)\\b",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.define.variable.promula"
        },
        "2": {
          "name": "storage.type.define.variable.promula"
        }
      },
      "end": "(?i)\\b(end(?:\\s+define)?)\\s+(variable)\\b",
      "endCaptures": {
        "1": {
          "name": "keyword.control.end.variable.promula"
        },
        "2": {
          "name": "storage.type.define.variable.promula"
        }
      },
      "patterns": [
        {
          "include": "$base"
        }
      ]
    },
    "define-segment": {
      "patterns": [
        {
          "name": "meta.block.define.segment.promula",
          "begin": "(?i)\\b(define)\\s+(segment)\\b\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\b",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.define.segment.promula"
            },
            "2": {
              "name": "storage.type.define.segment.promula"
            },
            "3": {
              "name": "entity.name.function.promula"
            }
          },
          "end": "(?i)\\b(end(?:\\s+define\\b)?)\\b(\\s+segment)\\s+(\\3)?\\b",
          "endCaptures": {
            "1": {
              "name": "keyword.control.end.segment.promula"
            },
            "2": {
              "name": "storage.type.define.segment.promula"
            },
            "3": {
              "name": "entity.name.function.promula"
            }
          },
          "patterns": [
            {
              "include": "$base"
            }
          ]
        },
        {
          "name": "meta.block.define.segment.promula",
          "begin": "(?i)\\b(define)\\s+(segment)\\b\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\b",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.define.segment.promula"
            },
            "2": {
              "name": "storage.type.define.segment.promula"
            },
            "3": {
              "name": "entity.name.function.promula"
            }
          },
          "end": "(?i)\\b(end(?:\\s+define\\b)?)\\b\\s+(\\3)?\\b",
          "endCaptures": {
            "1": {
              "name": "keyword.control.end.segment.promula"
            },
            "3": {
              "name": "entity.name.function.promula"
            }
          },
          "patterns": [
            {
              "include": "$base"
            }
          ]
        }
      ]
    },
    "keyword": {
      "patterns": [
        {
          "match": "(?i)\\b(type=real)\\(\\d+,\\d+\\)\\b",
          "name": "keyword.other.unit.promula"
        },
        {
          "match": "(?i)\\b(type=string)\\(\\d+\\)\\b",
          "name": "keyword.other.unit.promula"
        },
        {
          "match": "(?i)\\b(type=\\w+)\\b",
          "name": "keyword.other.unit.promula"
        },
        {
          "match": "(?i)\\b(popup)\\(.*?\\)\\b",
          "name": "keyword.control.popup.promula"
        },
        {
          "match": "(?i)\\b(ask)\\b",
          "name": "keyword.control.ask.promula"
        },
        {
          "match": "(?i)\\b(do\\s+if)\\b",
          "name": "keyword.control.do.if.promula"
        },
        {
          "match": "(?i)\\b(do\\s+until)\\b",
          "name": "keyword.control.do.until.promula"
        },
        {
          "match": "(?i)\\b(do\\s+while)\\b",
          "name": "keyword.control.do.while.promula"
        },
        {
          "match": "(?i)\\b(else\\s+if)\\b",
          "name": "keyword.control.else.if.promula"
        },
        {
          "match": "(?i)\\b(else)\\b",
          "name": "keyword.control.else.promula"
        },
        {
          "match": "(?i)\\b(break)\\b",
          "name": "keyword.control.break.promula"
        },
        {
          "match": "(?i)\\b(end\\s+do\\s+if)\\b",
          "name": "keyword.control.end.do.if.promula"
        },
        {
          "match": "(?i)\\b(end\\s+if)\\b",
          "name": "keyword.control.end.if.promula"
        },
        {
          "match": "(?i)\\b(end\\s+do)\\s+\\w+\\b",
          "captures": {
            "1": {
              "name": "keyword.control.end.do.word.promula"
            }
          }
        },
        {
          "match": "(?i)\\b(end)\\s+\\w+\\b",
          "captures": {
            "1": {
              "name": "keyword.control.end.word.promula"
            }
          }
        },
        {
          "match": "(?i)\\b(do)\\b",
          "captures": {
            "1": {
              "name": "keyword.control.do.word.promula"
            }
          }
        },
        {
          "match": "(?i)\\b(end)\\b",
          "name": "keyword.control.end.promula"
        },
        {
          "match": "(?i)\\b(stop\\s+promula)\\b",
          "name": "keyword.control.stop.promula"
        }
      ]
    },
    "operator": {
      "patterns": [
        {
          "match": "(?i)\\b(\\*|\\+|-|/|=|>|<|gt|lt|ge|le|eq|if|into|ne)\\b",
          "name": "keyword.operator.promula"
        }
      ]
    },
    "function": {
      "patterns": [
        {
          "match": "(?i)\\b(read|write|clear|compare|open|select|exp|ln|sin|arcsin|cos|arccos|tan|arctan|sqrt|sum|xmax|xmin|floor|round|ifix|random|sort|descending|ascending|using|copy)\\b",
          "name": "support.function.builtin.promula"
        }
      ]
    },
    "dummy-variable": {
      "comment": "dummy variable",
      "match": "(?i)(?:^|(?<=[&,\\(]))\\s*([a-z]\\w*)",
      "captures": {
        "1": {
          "name": "variable.parameter.promula"
        }
      }
    },
    "invalid-character": {
      "name": "invalid.error.promula",
      "match": "(?i)[^\\s;!\\n]+"
    },
    "invalid-word": {
      "name": "invalid.error.promula",
      "match": "(?i)\\b\\w+\\b"
    },
    "function-call": {
      "patterns": [
        {
          "match": "\\b([a-zA-Z_]\\w*)\\(\\s*.*?\\s*\\)",
          "captures": {
            "1": {
              "name": "entity.name.selector.promula"
            }
          }
        }
      ]
    }
  },
  "scopeName": "source.promula"
}
