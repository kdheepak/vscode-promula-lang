{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "PROMULA",
  "fileTypes": ["prm"],
  "patterns": [
    {
      "include": "#comment"
    },
    {
      "match": "(?i)\\b(true|false|Inf|NegInf|NaN|nil|NA)\\b",
      "name": "constant.language.promula"
    },
    {
      "include": "function-call"
    },
    {
      "include": "#numeric-constant"
    },
    {
      "include": "#define-procedure"
    },
    {
      "include": "#end-procedure"
    },
    {
      "include": "#define"
    },
    {
      "include": "#open-segment"
    },
    {
      "include": "#open-file"
    },
    {
      "include": "#function"
    },
    {
      "include": "#keyword"
    },
    {
      "include": "#operator"
    },
    {
      "include": "#string"
    }
  ],
  "repository": {
    "comment": {
      "patterns": [
        {
          "begin": "^\\s*\\*",
          "end": "\n",
          "name": "comment.line.promula"
        }
      ]
    },
    "numeric-constant": {
      "name": "constant.numeric.promula",
      "match": "(?ix)[\\+\\-]?(\\b\\d+\\.?\\d*|\\.\\d+) (_\\w+|d[\\+\\-]?\\d+|e[\\+\\-]?\\d+(_\\w+)?)?(?![a-z_])"
    },
    "string": {
      "patterns": [
        {
          "name": "string.quoted.double.promula",
          "begin": "\"",
          "end": "\""
        },
        {
          "name": "string.quoted.single.promula",
          "begin": "'",
          "end": "'"
        }
      ]
    },
    "open-segment": {
      "patterns": [
        {
          "match": "(?i)\\b(OPEN)\\s+(SEGMENT)\\b(.*)\\b(STATUS)\\s*(=)\\s*(\\w+)\\b",
          "captures": {
            "1": {
              "name": "keyword.control.promula"
            },
            "2": {
              "name": "storage.type.promula"
            },
            "3": {
              "name": "string.quoted.double"
            },
            "4": {
              "name": "storage.type.promula"
            },
            "5": {
              "name": "keyword.operator.promula"
            },
            "6": {
              "name": "entity.name.promula"
            }
          },
          "patterns": [
            {
              "include": "#string"
            }
          ]
        },
        {
          "match": "(?i)\\b(READ)\\s+(SEGMENT)\\s+([\\w\\d]+)(?:\\s*[,]\\s*([dD][oO])\\((\\w+)\\))?$",
          "captures": {
            "1": {
              "name": "keyword.control.promula"
            },
            "2": {
              "name": "storage.type.promula"
            },
            "3": {
              "name": "entity.name.function.promula"
            },
            "4": {
              "name": "keyword.control.promula"
            },
            "5": {
              "name": "entity.name.function.promula"
            }
          },
          "patterns": [
            {
              "include": "#string"
            }
          ]
        },
        {
          "match": "(?i)\\b(OPEN)\\s+(SEGMENT)\\b(.*)$",
          "captures": {
            "1": {
              "name": "keyword.control.promula"
            },
            "2": {
              "name": "storage.type.promula"
            },
            "3": {
              "name": "string.quoted.double"
            }
          },
          "patterns": [
            {
              "include": "#string"
            }
          ]
        }
      ]
    },
    "open-file": {
      "patterns": [
        {
          "match": "(?i)\\b(OPEN)\\s+(\\w+)\\b\\bSTATUS=\\w+$",
          "captures": {
            "1": {
              "name": "keyword.control.promula"
            },
            "2": {
              "name": "entity.name"
            }
          },
          "patterns": [
            {
              "include": "#string"
            }
          ]
        }
      ]
    },
    "define": {
      "patterns": [
        {
          "match": "(?i)\\b(DEFINE)\\s+(VARIABLE)\\b\\s+(SCRATCH)",
          "captures": {
            "1": {
              "name": "keyword.control.promula"
            },
            "2": {
              "name": "storage.type.promula"
            },
            "3": {
              "name": "storage.type.promula"
            }
          }
        },
        {
          "match": "(?i)\\b(DEFINE)\\s+(PROGRAM|MENU|TABLE|PARAMETER|FILE|PROCEDURE|RELATION|SET|VARIABLE|WINDOW)\\b",
          "captures": {
            "1": {
              "name": "keyword.control.promula"
            },
            "2": {
              "name": "storage.type.promula"
            }
          }
        },
        {
          "match": "(?i)\\b(END)\\s+(DEFINE)\\s+(PROGRAM|MENU|TABLE|PARAMETER|FILE|PROCEDURE|RELATION|SET|VARIABLE|WINDOW)\\b",
          "captures": {
            "1": {
              "name": "keyword.control.promula"
            },
            "2": {
              "name": "keyword.control.promula"
            },
            "3": {
              "name": "storage.type.promula"
            }
          }
        },
        {
          "match": "(?i)\\b(END)\\s+(PROGRAM|MENU|TABLE|PARAMETER|FILE|PROCEDURE|RELATION|SET|VARIABLE|WINDOW)\\b",
          "captures": {
            "1": {
              "name": "keyword.control.promula"
            },
            "2": {
              "name": "storage.type.promula"
            }
          }
        }
      ]
    },
    "define-procedure": {
      "match": "(?i)\\b(DEFINE\\b)\\s+(PROCEDURE)\\s+([a-zA-Z_][a-zA-Z0-9_]*)",
      "captures": {
        "1": {
          "name": "keyword.control.promula"
        },
        "2": {
          "name": "storage.type.function.promula"
        },
        "3": {
          "name": "entity.name.function.promula"
        }
      }
    },
    "end-procedure": {
      "patterns": [
        {
          "match": "(?i)\\b(END)\\s+(DEFINE)\\s+(PROCEDURE)\\s+(\\w+)\\b",
          "captures": {
            "1": {
              "name": "keyword.control.promula"
            },
            "2": {
              "name": "keyword.control.promula"
            },
            "3": {
              "name": "storage.type.function.promula"
            },
            "4": {
              "name": "entity.name.function.promula"
            }
          }
        },
        {
          "match": "\\b(END\\b)\\s+(PROCEDURE)\\s+([a-zA-Z_][a-zA-Z0-9_]*)",
          "captures": {
            "1": {
              "name": "keyword.control.promula"
            },
            "2": {
              "name": "storage.type.function.promula"
            },
            "3": {
              "name": "entity.name.function.promula"
            }
          }
        },
        {
          "match": "(?i)\\b(END)\\s+(DEFINE)\\s+(\\w+)\\b",
          "captures": {
            "1": {
              "name": "keyword.control.promula"
            },
            "2": {
              "name": "keyword.control.promula"
            },
            "3": {
              "name": "entity.name.function.promula"
            }
          }
        }
      ]
    },
    "keyword": {
      "patterns": [
        {
          "match": "(?i)\\bOPEN\\s+SEGMENT\\b",
          "name": "keyword.control.promula"
        },
        {
          "match": "(?i)\\bTYPE=REAL\\(\\d+,\\d+\\)\\b",
          "name": "keyword.other.unit.promula"
        },
        {
          "match": "(?i)\\bTYPE=STRING\\(\\d+\\)\\b",
          "name": "keyword.other.unit.promula"
        },
        {
          "match": "(?i)\\bTYPE=\\w+\\b",
          "name": "keyword.other.unit.promula"
        },
        {
          "match": "(?i)\\bPOPUP\\(.*?\\)\\b",
          "name": "keyword.control.promula"
        },
        {
          "match": "(?i)\\bASK\\b",
          "name": "keyword.control.promula"
        },
        {
          "match": "(?i)\\bDO\\s+IF\\b",
          "name": "keyword.control.promula"
        },
        {
          "match": "(?i)\\bDO\\s+UNTIL\\b",
          "name": "keyword.control.promula"
        },
        {
          "match": "(?i)\\bDO\\s+WHILE\\b",
          "name": "keyword.control.promula"
        },
        {
          "match": "(?i)\\bELSE\\s+IF\\b",
          "name": "keyword.control.promula"
        },
        {
          "match": "(?i)\\bELSE\\b",
          "name": "keyword.control.promula"
        },
        {
          "match": "(?i)\\bBREAK\\b",
          "name": "keyword.control.promula"
        },
        {
          "match": "(?i)\\bEND\\s+IF\\b",
          "name": "keyword.control.promula"
        },
        {
          "match": "(?i)\\b(DO)\\s+\\w+\\b",
          "captures": {
            "1": {
              "name": "keyword.control.promula"
            }
          }
        },
        {
          "match": "(?i)\\b(END)\\s+(DO)\\s+\\w+\\b",
          "captures": {
            "1": {
              "name": "keyword.control.promula"
            },
            "2": {
              "name": "keyword.control.promula"
            }
          }
        },
        {
          "match": "(?i)\\b(END)\\s+\\w+\\b",
          "captures": {
            "1": {
              "name": "keyword.control.promula"
            }
          }
        },
        {
          "match": "(?i)\\bEND\\b",
          "name": "keyword.control.end.promula"
        },
        {
          "match": "(?i)\\bSTOP\\s+PROMULA\\b",
          "name": "keyword.control.promula"
        }
      ]
    },
    "operator": {
      "patterns": [
        {
          "match": "(?i)\\b(\\*|\\+|-|/|=|>|<|GT|LT|GE|LE|EQ|IF)\\b",
          "name": "keyword.operator.promula"
        }
      ]
    },
    "function": {
      "patterns": [
        {
          "match": "(?i)\\b(READ|WRITE|CLEAR|COMPARE|OPEN|SELECT|EXP|LN|SIN|ARCSIN|COS|ARCCOS|TAN|ARCTAN|SQRT|SUM|XMAX|XMIN|FLOOR|ROUND|IFIX|RANDOM|SORT|DESCENDING|ASCENDING|USING|COPY)\\b",
          "name": "support.function.promula"
        }
      ]
    },
    "function-call": {
      "patterns": [
        {
          "match": "\\b[a-zA-Z_]\\w*\\s*\\(\\s*(?:[^()]|(?R))*\\s*\\)",
          "name": "entity.name.function.promula"
        }
      ]
    },
    "dummy-variable": {
      "comment": "dummy variable",
      "match": "(?i)(?:^|(?<=[&,\\(]))\\s*([a-z]\\w*)",
      "captures": {
        "1": {
          "name": "variable.parameter.promula"
        }
      }
    },
    "invalid-character": {
      "name": "invalid.error.promula",
      "match": "(?i)[^\\s;!\\n]+"
    },
    "invalid-word": {
      "name": "invalid.error.promula",
      "match": "(?i)\\b\\w+\\b"
    }
  },
  "scopeName": "source.promula"
}
